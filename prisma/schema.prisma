// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  microsites  Microsite[]
}

model Microsite {
  id                String   @id @default(cuid())
  slug              String   @unique
  campaignId        String?
  campaign          Campaign? @relation(fields: [campaignId], references: [id])

  // Target company information
  targetCompanyName String
  targetCompanyUrl  String
  targetIndustry    String?
  targetCompanySize String?

  // Extracted data
  companyDescription String?
  techStack         Json?
  painPoints        Json?

  // Personalized content
  headline          String
  subheadline       String?
  valuePropositions Json
  customContent     Json?

  // Mosaic solution mapping
  recommendedSolutions Json

  // Status and metadata
  status            MicrositeStatus @default(DRAFT)
  publishedAt       DateTime?
  expiresAt         DateTime?

  // Analytics
  views             Int      @default(0)
  uniqueVisitors    Int      @default(0)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  visits            Visit[]
  leads             Lead[]
}

model Visit {
  id          String   @id @default(cuid())
  micrositeId String
  microsite   Microsite @relation(fields: [micrositeId], references: [id], onDelete: Cascade)

  // Visitor information
  visitorId   String   // Anonymous ID for tracking unique visitors
  ipAddress   String?
  userAgent   String?
  referrer    String?

  // Engagement metrics
  duration    Int?     // Time spent in seconds
  pageViews   Int      @default(1)
  ctaClicked  Boolean  @default(false)

  // Geographic data
  country     String?
  city        String?

  createdAt   DateTime @default(now())

  @@index([micrositeId])
  @@index([visitorId])
}

model Lead {
  id          String   @id @default(cuid())
  micrositeId String
  microsite   Microsite @relation(fields: [micrositeId], references: [id], onDelete: Cascade)

  // Contact information
  firstName   String
  lastName    String
  email       String
  phone       String?
  companyName String
  jobTitle    String?

  // Additional data
  message     String?
  metadata    Json?

  // Status
  status      LeadStatus @default(NEW)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([micrositeId])
  @@index([email])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum MicrositeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}
